head(df)
df_subset <- select(df, V3)
p <- ggplot(df_subset)
p +geom_dotplot()
head(df_subset)
p <- ggplot(df_subset, aes(V3))
p + geom_dotplot()
p + geom_dotplot(binwidth = 1)
p + geom_dotplot(binwidth = 10)
p + geom_boxplot()
df_subset$ID <- rep("17_clusters", length(df_subset))
head(df_subset)
clear
rm(p)
p <- ggplot(df_subset, aes(x=ID, y=V3))
p +geom_boxplot()
p +geom_dotplot()
p +geom_boxplot()
display.brewer.pal(n=5, name = "Dark2")
library(colorbrewer)
library(RColorBrewer)
display.brewer.all()
display.brewer.pal(n = 5, name = "Dark2")
display.brewer.all()
display.brewer.pal(n = 5, name = "set2")
display.brewer.pal(n = 5, name = "Set2")
display.brewer.pal(n = 5, name = "Set1")
display.brewer.pal(n = 5, name = "Set1", labels = jbrewcolours)
display.brewer.pal(n = 5, name = "Set1", labels = jBrewColours)
display.brewer.pal(n = 5, name = "Set1", labels = jBrewColours)
?display.brewer.pal
brewer.pal.info(n=5, name = "Set1")
brewer.pal.info["Set1"]
brewer.pal.info["Set1",]
jBrewColors <- brewer.pal(n = 5, name = "Set1")
jBrewColors
library("ape")
install.packages("phyclust")
demo("toy", package = "phyclust")
windows()
clear
ls
plotdots(X, X.class)
?plotdots
plotdots()
windows()
?windows
??windows
saveplot()
savePlot()
plot(plotdots(X, X.class))
ls
?plotdots
X <- seq.data.toy$org
X
clear
par(mfrow = c(2,2))
plotdots(X)
plotdots(X, diff.only = FALSE)
plotdots(X, diff.only = TRUE)
plotdots(X, fill = TRUE, diff.only = FALSE, label = FALSE)
plotdots(X, X.class)
X.SNP <- nid2sid(X)
plotdots(X.SNP, X.class)
plothist(X, X.class)
ret <- phyclust.edist(X, )
code.type
.code.type
write.*()
write.fasta()
libpaths()
.libPaths
.libPaths()
.libPaths()[1]
?ms
?seqgen
.show.option()
?gsub
seq.data.toy
toy
str(toy)
head(X)
str(X)
str(seq.data.toy)
seq.data.toy$seqname
clear
str(X.class)
head(X.class)
head(X)
head(seq.data.toy$seqname)
head(X.class)
source('~/Desktop/lastz/Contig_Analysis.R')
library(dplyr)
library(ggplot2)
data <- read.csv("q_CEN2_allPacbio_forR.csv", sep="\t", header=TRUE)
data$name1 <- as.factor(data$name1)
library("ape")
?find.consensus
??find.consensus
??missing.code
.missing.code
library("phyclust")
.missing.code
.missing.code$mid
.missing.code$code
type(.missing.code)
str(.missing.code)
library("phyclust")
.genetic.code
str(.genetic.code)
str(.snp)
?plot.gaps
??plotgaps
.code.type[1]
.code.type[2]
code.type = "SNP"
code.type %in% .code.type
sum(TRUE)
sum(FALSE)
.nucleotide
install.packages("adegenet")
install.packages("pegas")
4.5^(1/3)
1.65*12
3^(1/3)
1.44*12
?.C
library(pegas)
?haplotype.DNAbin
library(grid)
?viewport()
pushViewport(viewport())
grid.lines(c(0.05,0.95),c(0.95,0.05))
grid.lines(c(0.05,0.95),c(0.95,0.05))
grid.lines(c(0.95,0.05),c(0.05,0.95))
grid.lines(c(0.95,0.05),c(0.05,0.95))
dev.off()
pushViewport(viewport())
grid.lines(c(1,0),c(0,0))
grid.lines(c(0,0),c(1,1))
grid.lines(c(0.05,0.95),c(0.95,0.05))
grid.lines(c(0.95,0.05),c(0.05,0.05))
dev.off()
pushViewport(viewport())
grid.lines(c(0.05,0.95),c(0.95,0.05))
grid.lines(c(0.05,0.05),c(0.95,0.95))
dev.off()
pushViewport(viewport())
grid.lines(c(0.05,0.05),c(0.95,0.95))
grid.lines(c(0.0,0.1),c(0.0,0.95))
grid.lines(c(0.05,0.05),c(0.95,0.95))
grid.lines(c(0.05,0.95),c(0.95,0.95))
grid.lines(c(0.05,0.95),c(0.95,0.05))
grid.lines(c(0.05,0.05),c(0.95,0.95))
pushViewport(viewport())
grid.lines(c(0.05,0.05),c(0.95,0.95))
grid.rect()
grid.rect()
library(grid)
pushViewport(viewport())
grid.lines(c(0.05,0.05),c(0.95,0.95))
grid.lines(c(.1,.1),c(0.8,0.8))
par(mar=c(0,0,0,0))
pushViewport(viewport())
grid.lines(c(.1,.1),c(0.8,0.8))
?grid.lines
dev.off()
pushViewport(viewport())
grid.lines(c(0.95,0.05),c(0.05,0.95))
grid.lines(c(0.05,0.95),c(0.05,0.95))
y <- matrix(rnorm(100), 20, 5, dimnames=list(paste("g", 1:20, sep=""), paste("t", 1:5, sep="")))
y
hr <- hclust(as.dist(1-cor(t(y), method="pearson")), method="complete")
hr
y <- y[hr$order,]
y
?levelplot
??levelplot
library(ggplot2)
library(reshape2)
nRow <- 9
nCol <- 16
rnorm(9*16)
myData <- matrix(rnorm(nRow * nCol), ncol = nCol)
mean(myData)
summary(myData)
str(myData)
rownames(myData) <- letters[1:nRow]
letters[1:9]
colnames(myData) <- LETTERS[1:nCol]
for(ii in 2:ncol(myData)){  myData[, ii] <- myData[, ii-1] + rnorm(nrow(myData))  }
for(ii in 2:nrow(myData)){  myData[ii, ] <- myData[ii-1, ] + rnorm(ncol(myData))  }
head(myData)
melt(myData)
longData <- melt(myData)
head(longData, 20)
colorRampPalette
?colorRampPalette
library(phyclust)
?paml.baseml
clear
EMC <- .EMControl(init.procedure = "emEM")
EMC
set.seed(1234)
K <- 4
seq.data.toy
ret.K <- phyclust(seq.data.toy$org,K,EMC=EMC)
str(seq.data.toy)
str(ret.K)
ret.K$Mu
paml.baseml.control()
?gen.star.tree
she drives me crazy
list.dir()
ls
library(phyclust)
?bootstrap.seq.data
bootstrap.seq.data()
?predict
rep(6,10)
custom <-c(heat.colors(10)[3],terrain.colors(10)[c(1,4)],heat.colors(10)[7],topo.colors(10)[c(4,3)])
custom
setwd('/Users/shamoni/Desktop/cen-evo-devo/EXPERIMENTS/9_ChIPseq_2_Clstr')
library(phyclust)
library(plyr)
library(reshape)
seqdata <- read.fasta("q_CEN2_All_K6.aln2")
ids <- seqdata$seqname
ids.PB <- ids[grepl("Chr",ids)]
parseids <- function(x){
X <-vector(mode="character",length=5)
a <-strsplit(x,":")
X[1] <-ifelse(substr(a[[1]][1],1,3) == "_R_",substr(x,4,nchar(a[[1]][1])),a[[1]][1])
b <- strsplit(a[[1]][2],"-")
X[2] <- b[[1]][1]
X[3] <- b[[1]][2]
X[4] <- b[[1]][3]
X[5] <-ifelse(substr(a[[1]][1],1,3) == "_R_","2","1")
return(X)
}
what_is_adjacent <- function(df){
n <- nrow(df)
ls <- character(0)
for(i in 1:n){
if(df$diff.Prev[i] <= 175 & !is.na(df$diff.Prev[i])){ls <- c(ls,df[i,"Prev"])}
else{
ls <- c(ls,"Not CEN180")
}
if(df$diff.Next[i] <= 175 & !is.na(df$diff.Next[i])){ls <- c(ls,df[i,"Next"])}
else{
ls <- c(ls,"Not CEN180")
}
}
return(ls)
}
adj_df <-function(x){
df <-ldply(x,parseids)
colnames(df) <-c("Contig","Start","Stop","Cluster","Strand")
df$Start <- as.integer(df$Start)
df$Stop <- as.integer(df$Stop)
df <-df[with(df, order(Contig, Start)), ]
d <-sapply(1:nrow(df), function(i) df$Start[i] - df$Stop[i-1])
df$diff.Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Start[i+1] - df$Stop[i])
df$diff.Next <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i-1])
df$Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i+1])
df$Next <- sapply(1:length(d), function(x) d[[x]][1])
i <- which(!duplicated(df$Contig))
df$Prev[i] <- NA
df$Next[i-1] <- NA
out <- dlply(df,.(Cluster),what_is_adjacent)
out.df <- lapply(as.character(1:6), function(x) as.data.frame(table(out[x]),stringsAsFactors=FALSE))
freqs <-Reduce(function(...) merge(..., all=T,by="Var1"), out.df)
freqs[is.na(freqs)] <- 0
colnames(freqs) <-c("Adjacent","Cluster1","Cluster2","Cluster3","Cluster4","Cluster5","Cluster6")
freqs$Adjacent <- as.factor(freqs$Adjacent)
props <- lapply(2:7,function(x) as.data.frame(prop.table(freqs[x])))
props.df <- do.call(cbind,props)
props.df$Adjacent <- freqs$Adjacent
#return(melt(props.df))
return(freqs)
}
PB.df <-adj_df(ids)
PB.df
matrix(PB.df)
as.matrix(PB.df)
as.numeric(as.matrix(PB.df))
as.numeric(as.matrix(PB.df)[-1])
as.matrix(PB.df[-1])
prop.table(as.matrix(PB.df[-1]),margin=2)
adj_df <-function(x){
df <-ldply(x,parseids)
colnames(df) <-c("Contig","Start","Stop","Cluster","Strand")
df$Start <- as.integer(df$Start)
df$Stop <- as.integer(df$Stop)
df <-df[with(df, order(Contig, Start)), ]
d <-sapply(1:nrow(df), function(i) df$Start[i] - df$Stop[i-1])
df$diff.Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Start[i+1] - df$Stop[i])
df$diff.Next <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i-1])
df$Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i+1])
df$Next <- sapply(1:length(d), function(x) d[[x]][1])
i <- which(!duplicated(df$Contig))
df$Prev[i] <- NA
df$Next[i-1] <- NA
out <- dlply(df,.(Cluster),what_is_adjacent)
out.df <- lapply(as.character(1:6), function(x) as.data.frame(table(out[x]),stringsAsFactors=FALSE))
freqs <-Reduce(function(...) merge(..., all=T,by="Var1"), out.df)
freqs[is.na(freqs)] <- 0
props <- prop.table(as.matrix(freqs[-1]),margin=2)
props$Adjacent <- freqs$Adjacent
colnames(props) <-c("Adjacent","Cluster1","Cluster2","Cluster3","Cluster4","Cluster5","Cluster6")
return(props)
}
custom <-c(heat
setwd('/Users/shamoni/Desktop/cen-evo-devo/EXPERIMENTS/9_ChIPseq_2_Clstr')
library(phyclust)
library(plyr)
library(reshape)
seqdata <- read.fasta("q_CEN2_All_K6.aln2")
ids <- seqdata$seqname
ids.PB <- ids[grepl("Chr",ids)]
parseids <- function(x){
X <-vector(mode="character",length=5)
a <-strsplit(x,":")
X[1] <-ifelse(substr(a[[1]][1],1,3) == "_R_",substr(x,4,nchar(a[[1]][1])),a[[1]][1])
b <- strsplit(a[[1]][2],"-")
X[2] <- b[[1]][1]
X[3] <- b[[1]][2]
X[4] <- b[[1]][3]
X[5] <-ifelse(substr(a[[1]][1],1,3) == "_R_","2","1")
return(X)
}
what_is_adjacent <- function(df){
n <- nrow(df)
ls <- character(0)
for(i in 1:n){
if(df$diff.Prev[i] <= 175 & !is.na(df$diff.Prev[i])){ls <- c(ls,df[i,"Prev"])}
else{
ls <- c(ls,"Not CEN180")
}
if(df$diff.Next[i] <= 175 & !is.na(df$diff.Next[i])){ls <- c(ls,df[i,"Next"])}
else{
ls <- c(ls,"Not CEN180")
}
}
return(ls)
}
adj_df <-function(x){
df <-ldply(x,parseids)
colnames(df) <-c("Contig","Start","Stop","Cluster","Strand")
df$Start <- as.integer(df$Start)
df$Stop <- as.integer(df$Stop)
df <-df[with(df, order(Contig, Start)), ]
d <-sapply(1:nrow(df), function(i) df$Start[i] - df$Stop[i-1])
df$diff.Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Start[i+1] - df$Stop[i])
df$diff.Next <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i-1])
df$Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i+1])
df$Next <- sapply(1:length(d), function(x) d[[x]][1])
i <- which(!duplicated(df$Contig))
df$Prev[i] <- NA
df$Next[i-1] <- NA
out <- dlply(df,.(Cluster),what_is_adjacent)
out.df <- lapply(as.character(1:6), function(x) as.data.frame(table(out[x]),stringsAsFactors=FALSE))
freqs <-Reduce(function(...) merge(..., all=T,by="Var1"), out.df)
freqs[is.na(freqs)] <- 0
props <- prop.table(as.matrix(freqs[-1]),margin=2)
props$Adjacent <- freqs$Adjacent
colnames(props) <-c("Adjacent","Cluster1","Cluster2","Cluster3","Cluster4","Cluster5","Cluster6")
return(props)
}
PB.df <-adj_df(ids)
adj_df <-function(x){
df <-ldply(x,parseids)
colnames(df) <-c("Contig","Start","Stop","Cluster","Strand")
df$Start <- as.integer(df$Start)
df$Stop <- as.integer(df$Stop)
df <-df[with(df, order(Contig, Start)), ]
d <-sapply(1:nrow(df), function(i) df$Start[i] - df$Stop[i-1])
df$diff.Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Start[i+1] - df$Stop[i])
df$diff.Next <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i-1])
df$Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i+1])
df$Next <- sapply(1:length(d), function(x) d[[x]][1])
i <- which(!duplicated(df$Contig))
df$Prev[i] <- NA
df$Next[i-1] <- NA
out <- dlply(df,.(Cluster),what_is_adjacent)
out.df <- lapply(as.character(1:6), function(x) as.data.frame(table(out[x]),stringsAsFactors=FALSE))
freqs <-Reduce(function(...) merge(..., all=T,by="Var1"), out.df)
freqs[is.na(freqs)] <- 0
colnames(props) <-c("Adjacent","Cluster1","Cluster2","Cluster3","Cluster4","Cluster5","Cluster6")
props <- prop.table(as.matrix(freqs[-1]),margin=2)
props$Adjacent <- freqs$Adjacent
return(props)
}
PB.df <-adj_df(ids)
adj_df <-function(x){
df <-ldply(x,parseids)
colnames(df) <-c("Contig","Start","Stop","Cluster","Strand")
df$Start <- as.integer(df$Start)
df$Stop <- as.integer(df$Stop)
df <-df[with(df, order(Contig, Start)), ]
d <-sapply(1:nrow(df), function(i) df$Start[i] - df$Stop[i-1])
df$diff.Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Start[i+1] - df$Stop[i])
df$diff.Next <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i-1])
df$Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i+1])
df$Next <- sapply(1:length(d), function(x) d[[x]][1])
i <- which(!duplicated(df$Contig))
df$Prev[i] <- NA
df$Next[i-1] <- NA
out <- dlply(df,.(Cluster),what_is_adjacent)
out.df <- lapply(as.character(1:6), function(x) as.data.frame(table(out[x]),stringsAsFactors=FALSE))
freqs <-Reduce(function(...) merge(..., all=T,by="Var1"), out.df)
freqs[is.na(freqs)] <- 0
colnames(freqs) <-c("Adjacent","Cluster1","Cluster2","Cluster3","Cluster4","Cluster5","Cluster6")
props <- prop.table(as.matrix(freqs[-1]),margin=2)
props$Adjacent <- freqs$Adjacent
return(props)
}
PB.df <-adj_df(ids)
PB.df
adj_df <-function(x){
df <-ldply(x,parseids)
colnames(df) <-c("Contig","Start","Stop","Cluster","Strand")
df$Start <- as.integer(df$Start)
df$Stop <- as.integer(df$Stop)
df <-df[with(df, order(Contig, Start)), ]
d <-sapply(1:nrow(df), function(i) df$Start[i] - df$Stop[i-1])
df$diff.Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Start[i+1] - df$Stop[i])
df$diff.Next <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i-1])
df$Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i+1])
df$Next <- sapply(1:length(d), function(x) d[[x]][1])
i <- which(!duplicated(df$Contig))
df$Prev[i] <- NA
df$Next[i-1] <- NA
out <- dlply(df,.(Cluster),what_is_adjacent)
out.df <- lapply(as.character(1:6), function(x) as.data.frame(table(out[x]),stringsAsFactors=FALSE))
freqs <-Reduce(function(...) merge(..., all=T,by="Var1"), out.df)
freqs[is.na(freqs)] <- 0
colnames(freqs) <-c("Adjacent","Cluster1","Cluster2","Cluster3","Cluster4","Cluster5","Cluster6")
props <- prop.table(as.matrix(freqs[-1]),margin=2)
props$Adjacent <- freqs$Adjacent
return(freqs)
}
PB.df <-adj_df(ids)
PB.df
as.matrix(PB.df[-1],margin=2)
prop.table(as.matrix(PB.df[-1],margin=2))
prop.table(as.matrix(PB.df[-1],margin=2)
)
prop.table(as.matrix(PB.df[-1]),margin=2)
adj_df <-function(x){
df <-ldply(x,parseids)
colnames(df) <-c("Contig","Start","Stop","Cluster","Strand")
df$Start <- as.integer(df$Start)
df$Stop <- as.integer(df$Stop)
df <-df[with(df, order(Contig, Start)), ]
d <-sapply(1:nrow(df), function(i) df$Start[i] - df$Stop[i-1])
df$diff.Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Start[i+1] - df$Stop[i])
df$diff.Next <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i-1])
df$Prev <- sapply(1:length(d), function(x) d[[x]][1])
d <-sapply(1:nrow(df), function(i) df$Cluster[i+1])
df$Next <- sapply(1:length(d), function(x) d[[x]][1])
i <- which(!duplicated(df$Contig))
df$Prev[i] <- NA
df$Next[i-1] <- NA
out <- dlply(df,.(Cluster),what_is_adjacent)
out.df <- lapply(as.character(1:6), function(x) as.data.frame(table(out[x]),stringsAsFactors=FALSE))
freqs <-Reduce(function(...) merge(..., all=T,by="Var1"), out.df)
freqs[is.na(freqs)] <- 0
colnames(freqs) <-c("Adjacent","Cluster1","Cluster2","Cluster3","Cluster4","Cluster5","Cluster6")
return(freqs)
}
adj.df <-adj_df(ids)
adj.df
prop.table(as.matrix(adj.df[-1]),margin=2)
library(phyclust)
library(reshape)
source("./Scripts/clstr_pos_functions.R")
seqdata <- read.fasta("q_CEN2_All_K6.aln2")
ids <- seqdata$seqname
adj.df <- adj_counts_df(ids)
adj.prop.df <-prop.table(as.matrix(adj.df[-1]),margin=2)
adj.prop.df$Adjacent <- adj.df$Adjacent
adj.prop.df
adj.df
adj.prop.df <-prop.table(as.matrix(adj.df[-1]),margin=2)
adj.prop.df
adj.df$Adjacent
str(adj.df$Adjacent)
str(adj.prop.df)
adj.prop.df <-as.data.frame(prop.table(as.matrix(adj.df[-1]),margin=2))
adj.prop.df$Adjacent <- adj.df$Adjacent
plot.adjacent(melt(adj.prop.df))
